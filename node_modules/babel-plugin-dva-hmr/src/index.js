import { join } from 'path';

function getHmrString(appName, routerPath) {
  return `
(function() {
  // Generated by babel-plugin-dva-hmr
  console.log('[HMR] inited with babel-plugin-dva-hmr');
  ${appName}.router(require('${routerPath}'));
  ${appName}.use(hmr());

  function hmr() {
    return {
      onHmr(render) {
        if (module.hot) {
          const renderNormally = render;
          const renderException = (error) => {
            const RedBox = require('redbox-react');
            ReactDOM.render(React.createElement(RedBox, { error: error }), document.etElementById('root'));
          };
          const newRender = (router) => {
            try {
              renderNormally(router);
            } catch (error) {
              console.error('error', error);
              renderException(error);
            }
          };
          module.hot.accept('${routerPath}', () => {
            const router = require('${routerPath}');
            newRender(router);
          });
        }
      },
    };
  }
})()
    `;
}

export default function dvaHmrPlugin({ types:t }) {
  let isEntry = false;
  let appName = null;
  let isAdded = false;

  return {
    visitor: {
      Program: {
        enter(path, state) {
          if (!state.opts.entries) {
            throw new Error('[babel-plugin-dva-hmr error] You must set the `entries` option.');
          }
          const cwd = state.opts.cwd || process.cwd();
          const entries = state.opts.entries.map(entry => join(cwd, entry));
          if (entries.indexOf(this.file.opts.filename) > -1) {
            isEntry = true;
          }
        },
        exit() {
          isEntry = false;
        },
      },
      CallExpression(path, state) {
        if (!isEntry) return;
        const callee = path.node.callee;

        // Get appName.
        if (t.isIdentifier(callee) && callee.name === 'dva') {
          const parent = path.parentPath.node;
          if (t.isVariableDeclarator(parent) && t.isIdentifier(parent.id)) {
            appName = parent.id.name;
          }
        }
      },
      MemberExpression(path) {
        // Run once.
        if (isAdded) return;

        if (!isEntry || !appName) return;

        const { object, property } = path.node;
        const parent = path.parentPath.node;

        // Get routerPath.
        // app.router(require('./router'));
        if (
          t.isIdentifier(object)
          && t.isIdentifier(property)
          && object.name === appName
          && property.name === 'router'
          && t.isCallExpression(parent)
          && parent.arguments.length === 1
          && t.isCallExpression(parent.arguments[0])
          && parent.arguments[0].callee.name === 'require'
          && parent.arguments[0].arguments.length === 1
          && t.isLiteral(parent.arguments[0].arguments[0])
        ) {
          isAdded = true;
          const routerPath = parent.arguments[0].arguments[0].value;
          path.parentPath.replaceWithSourceString(getHmrString(appName, routerPath));
        }
      },
    },
  };
};
