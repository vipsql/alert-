'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dvaHmrPlugin;

var _path = require('path');

function getHmrString(appName, routerPath) {
  return '\n(function() {\n  // Generated by babel-plugin-dva-hmr\n  console.log(\'[HMR] inited with babel-plugin-dva-hmr\');\n  ' + appName + '.router(require(\'' + routerPath + '\'));\n  ' + appName + '.use(hmr());\n\n  function hmr() {\n    return {\n      onHmr(render) {\n        if (module.hot) {\n          const renderNormally = render;\n          const renderException = (error) => {\n            const RedBox = require(\'redbox-react\');\n            ReactDOM.render(React.createElement(RedBox, { error: error }), document.etElementById(\'root\'));\n          };\n          const newRender = (router) => {\n            try {\n              renderNormally(router);\n            } catch (error) {\n              console.error(\'error\', error);\n              renderException(error);\n            }\n          };\n          module.hot.accept(\'' + routerPath + '\', () => {\n            const router = require(\'' + routerPath + '\');\n            newRender(router);\n          });\n        }\n      },\n    };\n  }\n})()\n    ';
}

function dvaHmrPlugin(_ref) {
  var t = _ref.types;

  var isEntry = false;
  var appName = null;
  var isAdded = false;

  return {
    visitor: {
      Program: {
        enter: function enter(path, state) {
          if (!state.opts.entries) {
            throw new Error('[babel-plugin-dva-hmr error] You must set the `entries` option.');
          }
          var cwd = state.opts.cwd || process.cwd();
          var entries = state.opts.entries.map(function (entry) {
            return (0, _path.join)(cwd, entry);
          });
          if (entries.indexOf(this.file.opts.filename) > -1) {
            isEntry = true;
          }
        },
        exit: function exit() {
          isEntry = false;
        }
      },
      CallExpression: function CallExpression(path, state) {
        if (!isEntry) return;
        var callee = path.node.callee;

        // Get appName.
        if (t.isIdentifier(callee) && callee.name === 'dva') {
          var parent = path.parentPath.node;
          if (t.isVariableDeclarator(parent) && t.isIdentifier(parent.id)) {
            appName = parent.id.name;
          }
        }
      },
      MemberExpression: function MemberExpression(path) {
        // Run once.
        if (isAdded) return;

        if (!isEntry || !appName) return;

        var _path$node = path.node;
        var object = _path$node.object;
        var property = _path$node.property;

        var parent = path.parentPath.node;

        // Get routerPath.
        // app.router(require('./router'));
        if (t.isIdentifier(object) && t.isIdentifier(property) && object.name === appName && property.name === 'router' && t.isCallExpression(parent) && parent.arguments.length === 1 && t.isCallExpression(parent.arguments[0]) && parent.arguments[0].callee.name === 'require' && parent.arguments[0].arguments.length === 1 && t.isLiteral(parent.arguments[0].arguments[0])) {
          isAdded = true;
          var routerPath = parent.arguments[0].arguments[0].value;
          path.parentPath.replaceWithSourceString(getHmrString(appName, routerPath));
        }
      }
    }
  };
};
module.exports = exports['default'];